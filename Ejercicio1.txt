UT8_TA6


Estructuras de datos necesarias para implementar Kruskal

Un conjunto de aristas al principio sin ordenar, en el pseudocódigo provisto en clase este es llamado F, en este caso voy a llamarlo aristasSinOrdenar

Un grafo no dirigido el cuál se va a utilizar para ir guardando las los vertices y las aristas formando así el AAM


Pseudocódigo:

función kruskal()

devolver kruskalAuxiliar()



funcion kruskalAuxiliar()

AAM = nuevoGrafoNoDirigido(vertices, aristas)

aristasSinOrdenar = nuevo conjunto aristas.


//Ordenamos las aristas por menor costo

aristasSinOrdenar.ordenarPorMenorCosto()


aristasOrdenadas.añadir(aristasSinOrdenar)

aristasAgregadasAlAAM = 0

mientras aristasAgregadasAlAAM <> vertices.longitud -1 hacer
 aristaMinima = aristasOrdenadas.quitarPrimero //Quitamos la arista de menor costo, la primera en la lista de aristas ordenadas.

verticeOrigen = vertices.Obtener(aristaMinima.etiquetaOrigen)

verticeDestino = vertices.Obtener(aristaMinima.etiquetaDestino)


Si AAM no esta conectado con el verticeOrigen y on el verticeDestino entonces
   AAM.insertar(aristaMinima)

   aristasAgregadasAlAAM++

fin si

fin mientras


devolver AAM



Orden de tiempo de ejecución O(E LOG E)
